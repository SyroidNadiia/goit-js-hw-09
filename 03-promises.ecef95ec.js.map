{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAa3B,SAAuBC,GACrBA,EAAMC,iBAGN,IAFA,IAAgCC,EATlC,SAAyBF,GAIvB,OAHAG,EAAQC,OAAOJ,EAAMK,OAAOC,SAASC,MAAMC,OAC3CC,EAAOL,OAAOJ,EAAMK,OAAOC,SAASI,KAAKF,OACzCG,EAASP,OAAOJ,EAAMK,OAAOC,SAASM,OAAOJ,OACtC,CAAED,MAAAJ,EAAOO,KAAAD,EAAMG,OAAAD,E,CAKUE,CAAgBb,GAAxCc,EAAwBZ,EAAxBK,MAAOQ,EAAiBb,EAAjBQ,KAAMM,EAAWd,EAAXU,OAEZK,EAAW,EAAGA,EAAWD,EAAQC,GAAY,EACpDC,EAAcD,EAAW,EAAGH,EAAQC,EAAOE,GACxCE,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALb,MACjBgB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARC,SAAUO,EAAKR,EAALb,MAClBgB,EAAA7B,GAAS8B,OAAOK,QACd,sBAAqCH,OAAfL,EAAS,QAAYK,OAANE,EAAM,M,OAxBrD,IAAIzB,EAAQ,EACRM,EAAO,EACPE,EAAS,EA4Bb,SAASO,EAAcG,EAAUS,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEd,WAAUd,MAAAuB,IAEpBM,EAAO,CAAEf,WAAUd,MAAAuB,G,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onStartCreate);\n\nlet delay = 0;\nlet step = 0;\nlet amount = 0;\n\nfunction onGetInputsData(event) {\n  delay = Number(event.target.elements.delay.value);\n  step = Number(event.target.elements.step.value);\n  amount = Number(event.target.elements.amount.value);\n  return { delay, step, amount };\n}\n\nfunction onStartCreate(event) {\n  event.preventDefault();\n  const { delay, step, amount } = onGetInputsData(event);\n\n  for (let position = 0; position < amount; position += 1) {\n    createPromise(position + 1, delay + step * position)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","form","document","querySelector","addEventListener","event","preventDefault","ref","$ce04d3a99e08e73b$var$delay","Number","target","elements","delay","value","$ce04d3a99e08e73b$var$step","step","$ce04d3a99e08e73b$var$amount","amount","$ce04d3a99e08e73b$var$onGetInputsData","delay1","step1","amount1","position1","$ce04d3a99e08e73b$var$createPromise","then","param","position","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure","delay4","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.ecef95ec.js.map"}