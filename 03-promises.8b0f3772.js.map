{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAc3B,SAAuBC,GACrBA,EAAMC,iBAGN,IAFA,IAAgCC,EATlC,SAAyBF,GAIvB,OAHAG,EAAQC,OAAOJ,EAAMK,OAAOC,SAASC,MAAMC,OAC3CC,EAAOL,OAAOJ,EAAMK,OAAOC,SAASI,KAAKF,OACzCG,EAASX,EAAMK,OAAOC,SAASM,OAAOJ,MAC/B,CAAED,MAAAJ,EAAOO,KAAAD,EAAMG,OAAAD,E,CAKUE,CAAgBb,GAAxCc,EAAwBZ,EAAxBK,MAAOQ,EAAiBb,EAAjBQ,KAAMM,EAAWd,EAAXU,OAEZK,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAGhCC,EAAcC,SAAUL,GACrBM,MAAK,SAAAC,G,IAAGC,EAAQD,EAARF,SAAUI,EAAKF,EAALd,MACjBiB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARF,SAAUU,EAAKR,EAALd,MAClBiB,EAAA9B,GAAS+B,OAAOK,QACd,sBAAqCH,OAAfL,EAAS,QAAYK,OAANE,EAAM,M,IAIjDf,GAASC,C,IA/Bb,IAAIZ,EAAQ,EACRM,EAAO,EACPE,EAAS,EAiCb,SAASO,EAAcC,EAAUY,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEjB,WAAUZ,MAAAwB,IAEpBM,EAAO,CAAElB,WAAUZ,MAAAwB,G,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onStartCreate);\n\nlet delay = 0;\nlet step = 0;\nlet amount = 0;\n// let position = 0;\n\nfunction onGetInputsData(event) {\n  delay = Number(event.target.elements.delay.value);\n  step = Number(event.target.elements.step.value);\n  amount = event.target.elements.amount.value;\n  return { delay, step, amount };\n}\n\nfunction onStartCreate(event) {\n  event.preventDefault();\n  const { delay, step, amount } = onGetInputsData(event);\n\n  for (let i = 1; i <= amount; i += 1) {\n    // position += 1;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","form","document","querySelector","addEventListener","event","preventDefault","ref","$ce04d3a99e08e73b$var$delay","Number","target","elements","delay","value","$ce04d3a99e08e73b$var$step","step","$ce04d3a99e08e73b$var$amount","amount","$ce04d3a99e08e73b$var$onGetInputsData","delay1","step1","amount1","i","$ce04d3a99e08e73b$var$createPromise","position","then","param","_$position","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure","delay4","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.8b0f3772.js.map"}