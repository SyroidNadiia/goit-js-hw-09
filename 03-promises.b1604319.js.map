{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAc3B,SAAuBC,GACrBA,EAAMC,iBACN,MAAQC,MAAAC,EAAOC,KAAAC,EAAMC,OAAAC,GATvB,SAAyBP,GAIvB,OAHAQ,EAAQC,OAAOT,EAAMU,OAAOC,SAAST,MAAMU,OAC3CC,EAAOJ,OAAOT,EAAMU,OAAOC,SAASP,KAAKQ,OACzCE,EAASd,EAAMU,OAAOC,SAASL,OAAOM,MAC/B,C,MAAEJ,E,KAAOK,E,OAAMC,E,CAKUC,CAAgBf,GAEhD,IAAK,IAAIgB,EAAI,EAAGA,GAAKT,EAAQS,GAAK,EAGhCC,EAAcC,SAAUf,GACrBgB,MAAK,EAACD,SAAEA,EAAUhB,MAAAkB,MACjBC,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqBL,QAAiBE,MAAU,IAGnDI,OAAM,EAACN,SAAEA,EAAUhB,MAAAuB,MAClBJ,EAAA3B,GAAS4B,OAAOI,QACd,sBAAoBR,QAAeO,MAAU,IAInDtB,GAASE,C,IA/Bb,IAAIG,EAAQ,EACRK,EAAO,EACPC,EAAS,EAiCb,SAASG,EAAcC,EAAUS,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEd,EAAUhB,MAAAyB,IAEpBM,EAAO,C,SAAEf,EAAUhB,MAAAyB,GAAQ,GAE5BA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onStartCreate);\n\nlet delay = 0;\nlet step = 0;\nlet amount = 0;\n// let position = 0;\n\nfunction onGetInputsData(event) {\n  delay = Number(event.target.elements.delay.value);\n  step = Number(event.target.elements.step.value);\n  amount = event.target.elements.amount.value;\n  return { delay, step, amount };\n}\n\nfunction onStartCreate(event) {\n  event.preventDefault();\n  const { delay, step, amount } = onGetInputsData(event);\n\n  for (let i = 1; i <= amount; i += 1) {\n    // position += 1;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","form","document","querySelector","addEventListener","event","preventDefault","delay","delay1","step","step1","amount","amount1","$47d4ff9957288465$var$delay","Number","target","elements","value","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$onGetInputsData","i","$47d4ff9957288465$var$createPromise","position","then","delay2","$parcel$interopDefault","Notify","success","catch","delay3","failure","delay4","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.b1604319.js.map"}